const config = require('../config');
const moment = require('moment-timezone');
const fs = require('fs');
const { cmd, commands } = require('../command');
const axios = require('axios');

// Fonction pour transformer en petites majuscules (small caps)
function toSmallCaps(text) {
    const smallCapsMap = {
        a: '·¥Ä', b: ' ô', c: '·¥Ñ', d: '·¥Ö', e: '·¥á', f: 'Íú∞',
        g: '…¢', h: ' ú', i: '…™', j: '·¥ä', k: '·¥ã', l: ' ü',
        m: '·¥ç', n: '…¥', o: '·¥è', p: '·¥ò', q: '«´', r: ' Ä',
        s: 'Íú±', t: '·¥õ', u: '·¥ú', v: '·¥†', w: '·¥°', x: 'x',
        y: ' è', z: '·¥¢'
    };
    return text.toLowerCase().split('').map(c => smallCapsMap[c] || c).join('');
}

// Fonction uptime
function uptime() {
    let totalSeconds = process.uptime();
    let hours = Math.floor(totalSeconds / 3600);
    let minutes = Math.floor((totalSeconds % 3600) / 60);
    let seconds = Math.floor(totalSeconds % 60);
    return `${hours}h ${minutes}m ${seconds}s`;
}

// Fonction pour l'heure actuelle (optionnel : adapte ta timezone)
function getCurrentDateTime() {
    return moment().tz("Africa/Port-au-Prince").format("DD/MM/YYYY HH:mm");
}

cmd({
    pattern: "menu",
    alias: ["allmenu", "fullmenu"],
    use: '.menu',
    desc: "Show all bot commands",
    category: "menu",
    react: "‚ôæÔ∏è",
    filename: __filename
},
async (conn, mek, m, {
    from, quoted, body, isCmd, command, args, q,
    isGroup, sender, senderNumber, botNumber2,
    botNumber, pushname, isMe, isOwner,
    groupMetadata, groupName, participants,
    groupAdmins, isBotAdmins, isAdmins, reply
}) => {
    try {
        let dec = `‚îè‚îÅ„Äî ùêàùêçùêÖùêàùêçùêàùêìùêò-ùêåùêÉ ‚ôæÔ∏è „Äï‚îÅ‚îì
‚îÉ üßë‚Äçüíª ·¥úÍú±·¥á Ä : @${m.sender.split("@")[0]}
‚îÉ üïí ·¥Ö·¥Ä·¥õ·¥á : ${getCurrentDateTime()}
‚îÉ ‚è≥  Ä·¥ú…¥·¥õ…™·¥ç·¥á : ${uptime()}
‚îÉ üß≠ ·¥ç·¥è·¥Ö·¥á : *${config.MODE}*
‚îÉ üí† ·¥ò Ä·¥á“ì…™x : [${config.PREFIX}]
‚îÉ üìÇ ·¥Ñ·¥ç·¥ÖÍú± : ${commands.length}
‚îÉ üë®‚ÄçüöÄ ·¥Ö·¥á·¥† : *ùêíùêàùêëùêàùêîùêí*
‚îÉ üß¨ ·¥†·¥á ÄÍú±…™·¥è…¥ : *1.0.0*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

„Äé ùêñùêÑùêãùêÇùêéùêåùêÑ ùêìùêé ùêàùêçùêÖùêàùêçùêàùêìùêò-ùêåùêÉ „Äè
`;

        let category = {};
        for (let cmd of commands) {
            if (!cmd.category) continue;
            if (!category[cmd.category]) category[cmd.category] = [];
            category[cmd.category].push(cmd);
        }

        const keys = Object.keys(category).sort();
        let menuText = '';
        for (let k of keys) {
            menuText += `\n\n‚≠ì *${k.toUpperCase()} MENU*`;
            const cmds = category[k].filter(c => c.pattern).sort((a, b) => a.pattern.localeCompare(b.pattern));
            cmds.forEach((cmd) => {
                const usage = cmd.pattern.split('|')[0];
                menuText += `\n‚îÇ ‚û§ \`${config.PREFIX}${toSmallCaps(usage)}\``;
            });
            menuText += `\n‚ï∞‚îÄ‚îÄ‚îÄ‚ü°`;
        }
        menuText += `\n\n> ${config.DESCRIPTION}`;

        await conn.sendMessage(
            from,
            {
                image: { url: 'https://files.catbox.moe/6zuzje.jpg' },
                caption: dec + menuText,
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363328294650605@newsletter',
                        newsletterName: config.BOT_NAME,
                        serverMessageId: 143
                    }
                }
            },
            { quoted: mek }
        );

        // Send audio
        await conn.sendMessage(from, {
            audio: fs.readFileSync('./infinity00/menu.mp3'),
            mimetype: 'audio/mp4',
            ptt: true
        }, { quoted: mek });

    } catch (e) {
        console.log(e);
        reply(`‚ùå Error: ${e}`);
    }
});

const config = require('../config')
const { cmd } = require('../command')
const { getBuffer, fetchJson } = require('../lib/functions')

cmd({
    pattern: "tagall",
    react: "üîä",
    alias: ["gc_tagall"],
    desc: "Tague tous les membres du groupe",
    category: "group",
    use: '.tagall [message]',
    filename: __filename
},
async (conn, mek, m, { from, participants, reply, isGroup, senderNumber, prefix, command, args }) => {
    try {
        if (!isGroup) return reply("‚ùå Cette commande est r√©serv√©e aux groupes.");

        const botOwner = conn.user.id.split(":")[0];
        const senderJid = senderNumber + "@s.whatsapp.net";

        const groupMetadata = await conn.groupMetadata(from);
        const admins = groupMetadata.participants
            .filter(p => p.admin !== null)
            .map(p => p.id);

        if (!admins.includes(senderJid) && senderNumber !== botOwner)
            return reply("‚ùå Seuls les administrateurs du groupe ou le propri√©taire du bot peuvent utiliser cette commande.");

        const groupName = groupMetadata.subject || "Groupe inconnu";
        const totalMembers = participants.length;
        const message = args.join(" ") || "„Äò üîî Attention tout le monde ! „Äô";

        const emojis = ['üì¢','üîä','üåê','üî∞','‚ù§‚Äçü©π','ü§ç','üñ§','ü©µ','üìù','üíó','üîñ','ü™©','üì¶','üéâ','üõ°Ô∏è','üí∏','‚è≥','üóø','üöÄ','‚ùÑÔ∏è','üë®‚Äçüíª','‚ö†Ô∏è','üî•'];
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

        let teks = `‚ï≠‚îÄ‚ùñ„Äå *üì¢ TAGALL* „Äç\n‚îÇ\n`;
        teks += `‚îÇ üéØ *Groupe* : ${groupName}\n`;
        teks += `‚îÇ üë• *Membres* : ${totalMembers}\n`;
        teks += `‚îÇ üí¨ *Message* : ${message}\n‚îÇ\n`;
        teks += `‚ï∞‚îÄ‚ä∑ *Mentions*\n\n`;

        for (let mem of participants) {
            teks += `${randomEmoji} @${mem.id.split('@')[0]}\n`;
        }

        teks += `\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ[ üî∞ INFINITY-MD üî∞ ]‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n       Powered by SIRIUS\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

        conn.sendMessage(from, { text: teks, mentions: participants.map(a => a.id) }, { quoted: mek });

    } catch (e) {
        console.error("TagAll Error:", e);
        reply(`‚ùå *Erreur rencontr√©e !*\n\n${e.message || e}`);
    }
});
